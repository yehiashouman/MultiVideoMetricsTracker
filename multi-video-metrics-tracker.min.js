/* MultiVideoMetricsTracker :  Tracks playback metrics for multiple video elements in real time (time watched, fullscreen toggles, and user engagement)
 * By:Yehia Shouman (info@yehiashouman.com), License: GPL-3.0
 * Usage: see https://github.com/yehiashouman/MultiVideoMetricsTracker/blob/main/README.md*/
class MultiVideoMetricsTracker{constructor(e,t=1,i="videometrics"){this.videoMap=new Map,this.intervalSeconds=t,this.eventName=i;let s=[];"string"==typeof e?s=Array.from(document.querySelectorAll(e)):NodeList.prototype.isPrototypeOf(e)||Array.isArray(e)?s=Array.from(e):e instanceof HTMLVideoElement&&(s=[e]),s.forEach((e=>this.addVideo(e))),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((e=>{document.addEventListener(e,this._handleFullscreen)})),window.addEventListener("visibilitychange",(()=>{"visible"!==document.visibilityState&&this.videoMap.forEach(((e,t)=>this._stopTracking(t)))})),this.observer=new MutationObserver((()=>{this.videoMap.forEach(((e,t)=>{document.body.contains(t)||this.removeVideo(t)}))})),this.observer.observe(document.body,{childList:!0,subtree:!0}),this.session_created_at=new Date,this.intervalId=setInterval(this._intervalUpdate,1e3*this.intervalSeconds)}_getInitialMetrics=()=>({ff_seek_count:0,rw_seek_count:0,replay_count:0,fs_count:0,unique_viewed_sec:0,percentage_unique_viewed:0,total_watch_time_sec:0,percent_max_progress:0,duration_sec:0,current_time_sec:0,session_time_sec:0});addVideo=e=>{if(this.videoMap.has(e))return;const t={metrics:this._getInitialMetrics(),metadata_loaded:1,playedback_unique_seconds:new Set,playedback_max_sec:0,video_visibility:0,lastStart:null,playbackTime:0,lastPlaybackTime:0,session_time_start:new Date},i=()=>{t.metadata_loaded=1},s=()=>this._startTracking(e),n=()=>this._startTracking(e),a=()=>this._stopTracking(e),r=()=>this._stopTracking(e),c=()=>this._stopTracking(e),o=()=>this._trackSeeks(e),d=()=>this._checkReplay(e),l=()=>this._checkReplay(e);e.addEventListener("loadedmetadata",i),e.addEventListener("play",s),e.addEventListener("timeupdate",n),e.addEventListener("pause",a),e.addEventListener("ended",r),e.addEventListener("waiting",c),e.addEventListener("seeking",o),e.addEventListener("play",d),e.addEventListener("seeked",l),this.videoMap.set(e,{...t,handlers:{onLoadedMetadata:i,onPlay:s,onTimeupdate:n,onPause:a,onEnded:r,onWaiting:c,onSeeking:o,onReplayPlay:d,onReplaySeeked:l}})};removeVideo=e=>{const t=this.videoMap.get(e);if(!t)return;const i=t.handlers;e.removeEventListener("loadedmetadata",i.onLoadedMetadata),e.removeEventListener("play",i.onPlay),e.removeEventListener("timeupdate",i.onTimeupdate),e.removeEventListener("pause",i.onPause),e.removeEventListener("ended",i.onEnded),e.removeEventListener("waiting",i.onWaiting),e.removeEventListener("seeking",i.onSeeking),e.removeEventListener("play",i.onReplayPlay),e.removeEventListener("seeked",i.onReplaySeeked),this.videoMap.delete(e)};_isPlaying=e=>!e.paused&&!e.ended&&e.currentTime>0;_isInView=e=>{const t=e.getBoundingClientRect();return"visible"===document.visibilityState&&t.top<window.innerHeight&&t.bottom>0&&t.left<window.innerWidth&&t.right>0&&!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};_isVisibleAndPlaying=e=>this._isInView(e)&&this._isPlaying(e);_startTracking=e=>{const t=this.videoMap.get(e);null===t.lastStart&&(t.lastStart=e.currentTime)};_stopTracking=e=>{const t=this.videoMap.get(e);if(null!==t.lastStart){const i=e.currentTime-t.lastStart;i>0&&(t.playbackTime+=i),t.metrics.total_watch_time_sec=t.playbackTime,t.lastStart=null}};_trackSeeks=e=>{const t=this.videoMap.get(e);e.currentTime>t.metrics.current_time_sec&&t.metrics.ff_seek_count++,e.currentTime<t.metrics.current_time_sec&&t.metrics.rw_seek_count++};_handleFullscreen=()=>{this.videoMap.forEach(((e,t)=>{!!(document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement)&&e.metrics.fs_count++}))};_checkReplay=e=>{const t=this.videoMap.get(e);void 0!==t.lastPlaybackTime&&t.lastPlaybackTime>1&&e.currentTime<1&&t.metrics.replay_count++,t.lastPlaybackTime=e.currentTime};_intervalUpdate=()=>{this.videoMap.forEach(((e,t)=>{e.metadata_loaded&&(e.metrics.current_time_sec=t.currentTime,e.metrics.duration_sec=t.duration>0?t.duration:0,e.playedback_max_sec=Math.max(e.metrics.current_time_sec,e.playedback_max_sec),e.video_visibility=this._isVisibleAndPlaying(t),e.metrics.session_time_sec=Number(((new Date-e.session_time_start)/1e3).toFixed(2)),e.video_visibility&&(e.playedback_unique_seconds.add(Math.floor(e.metrics.current_time_sec)),e.metrics.unique_viewed_sec=e.playedback_unique_seconds.size,e.metrics.percentage_unique_viewed=e.metrics.unique_viewed_sec>0&&e.metrics.duration_sec>0?Number((e.metrics.unique_viewed_sec/e.metrics.duration_sec).toFixed(2)):0,e.metrics.percent_max_progress=e.playedback_max_sec>0&&e.metrics.duration_sec>0?Number((e.playedback_max_sec/e.metrics.duration_sec).toFixed(2)):0),t.dispatchEvent(new CustomEvent(this.eventName,{detail:{metrics:{...e.metrics},video:t}})))}))};getVideos=()=>Array.from(this.videoMap.keys());getMetrics=e=>this.videoMap.get(e)?.metrics||null;getAllMetrics=()=>Array.from(this.videoMap.entries()).map((([e,t])=>({video:e,metrics:t.metrics})));destroy=()=>{clearInterval(this.intervalId),this.observer&&this.observer.disconnect(),this.videoMap.forEach(((e,t)=>this.removeVideo(t)))}}